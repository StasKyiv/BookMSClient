@page "/"
@using System.Text.Json
@using BookCatalogManagementSystem.Client.Models
@using BookCatalogManagementSystem.Client.Services
@using BookCatalogManagementSystem.Client.SignalR
@inject BookService BookService
@inject SignalRService SignalRService

<h3>Book List</h3>

<div class="container">
    <div class="mb-3 d-flex align-items-center">
        <InputText placeholder="Enter your search" id="search" class="form-control" @bind-Value="searchQuery"/>
        <button @onclick="FetchBooks" class="btn btn-info ms-2">
            Search
        </button>
    </div>

    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
            <tr>
                <th>
                    <button class="btn btn-link d-flex flex-nowrap align-items-center"
                            @onclick="() => ApplySorting(nameof(BookDto.Title))">
                        <span style="font-size: 14px">Title</span>
                        <span class="ms-1" style="font-size: 10px">@DisplaySortIcon(nameof(BookDto.Title))</span>
                    </button>
                </th>
                <th>
                    <button class="btn btn-link d-flex flex-nowrap align-items-center"
                            @onclick="() => ApplySorting(nameof(BookDto.Author))">
                        <span style="font-size: 14px">Author</span>
                        <span class="ms-1" style="font-size: 10px">@DisplaySortIcon(nameof(BookDto.Author))</span>
                    </button>
                </th>
                <th>
                    <button class="btn btn-link d-flex flex-nowrap align-items-center"
                            @onclick="() => ApplySorting(nameof(BookDto.Genre))">
                        <span style="font-size: 14px">Genre</span>
                        <span class="ms-1" style="font-size: 10px">@DisplaySortIcon(nameof(BookDto.Genre))</span>
                    </button>
                </th>
                <th>
                    <span style="font-size: 14px">Actions</span>
                </th>
            </tr>
            </thead>
            <tbody>
            @if (books != null && books.Any())
            {
                @foreach (var book in books)
                {
                    <tr>
                        <td>@book.Title</td>
                        <td>@book.Author</td>
                        <td>@book.Genre</td>
                        <td>
                            <button class="table-button background-edit color-white" @onclick="() => EditBook(book)">Edit</button>
                            <button class="table-button background-remove color-white" @onclick="() => DeleteBook(book.Id)">Delete</button>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="4">No books available.</td>
                </tr>
            }
            </tbody>
        </table>
    </div>

    <!-- Pagination Controls -->
    <div class="mt-2 col-12 pagination d-flex flex-nowrap align-items-center justify-content-center">
        <button class="table-button width-pagination me-2" @onclick="GoToPreviousPage" disabled="@(!CanGoToPreviousPage)">Previous
        </button>
        <span>Page @currentPage of @totalPages</span>
        <button class="table-button width-pagination ms-2" @onclick="GoToNextPage" disabled="@(!CanGoToNextPage)">Next</button>
    </div>

    <hr/>

    <h3>@(isEditing ? "Update Book" : "Add New Book")</h3>

    <EditForm Model="@_currentBookDto" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <div class="mb-3">
            <label for="title" class="form-label">Title</label>
            <InputText id="title" class="form-control" @bind-Value="_currentBookDto.Title"/>
        </div>

        <div class="mb-3">
            <label for="author" class="form-label">Author</label>
            <InputText id="author" class="form-control" @bind-Value="_currentBookDto.Author"/>
        </div>

        <div class="mb-3">
            <label for="genre" class="form-label">Genre</label>
            <InputText id="genre" class="form-control" @bind-Value="_currentBookDto.Genre"/>
        </div>

        <button type="submit" class="btn btn-primary me-2">@((isEditing ? "Update" : "Add") + " Book")</button>
        @if (isEditing)
        {
            <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
        }
    </EditForm>
</div>

@code {
    private List<BookDto> books = new();
    private BookDto _currentBookDto = new();
    private bool isEditing;
    private string currentSortColumn = "id";
    private bool isAscending = true;
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages = 1;
    private int totalItems = 0;
    private string searchQuery = string.Empty;
    private System.Timers.Timer? debounceTimer;

    protected override async Task OnInitializedAsync()
    {
        await FetchBooks(); // Fetch the initial list of books.
        SignalRService.OnBookReceived += OnBookReceived; // Subscribe to real-time book updates.
    }

    private async Task FetchBooks()
    {
        var data = await BookService
            .FetchBooks(currentPage, pageSize, currentSortColumn, isAscending, searchQuery);
        SetPagination(data);
    }

    private void SetPagination(PageListDto<BookDto> pageListBook)
    {
        if (pageListBook.Items != null)
        {
            books = pageListBook.Items.ToList();
            totalItems = pageListBook.TotalCount;
            totalPages = pageListBook.TotalPages;
            StateHasChanged();
        }
    }

    private async Task ApplySorting(string column)
    {
        if (currentSortColumn == column)
        {
            isAscending = !isAscending;
        }
        else
        {
            currentSortColumn = column;
            isAscending = true;
        }

        await FetchBooks();
    }

    private string DisplaySortIcon(string column) =>
        currentSortColumn == column ? (isAscending ? "▲" : "▼") : "";

    private async Task HandleSubmit()
    {
        bool success;
        if (isEditing)
        {
            success = await BookService.UpdateBook(_currentBookDto);
        }
        else
        {
            success = await BookService.CreateBook(_currentBookDto);
        }

        if (success)
        {
            ClearForm();
            await FetchBooks(); // Refresh the list of books.
        }
    }

    private void CancelEdit()
    {
        ClearForm();
    }

    private void ClearForm()
    {
        _currentBookDto = new BookDto();
        isEditing = false;
    }

    private async Task EditBook(BookDto book)
    {
        _currentBookDto = book;
        isEditing = true;
    }

    private async Task DeleteBook(int bookId)
    {
        var success = await BookService.DeleteBook(bookId);
        if (success)
        {
            await FetchBooks(); // Refresh the book list after deletion.
        }
    }

    private bool CanGoToPreviousPage => currentPage > 1;
    private bool CanGoToNextPage => currentPage < totalPages;

    private void GoToPreviousPage() => ChangePage(currentPage - 1);
    private void GoToNextPage() => ChangePage(currentPage + 1);

    private async void ChangePage(int newPage)
    {
        currentPage = newPage;
        await FetchBooks();
    }

    private void OnBookReceived(string json)
    {
        var pageData = JsonSerializer.Deserialize<PageListDto<BookDto>>(json);
        SetPagination(pageData);
        StateHasChanged();
    }
}
